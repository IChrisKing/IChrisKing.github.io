= 原网权限管理策略 = 

= 作用点 =
数据包入口和出口各有一个审核点，各有一套权限策略。

= 组成要素 =
== 引擎层 ==
=== 源ip ===

=== 目的ip ===

=== 协议类型 ===
TCP/UDP

=== session状态 ===
==== 三种状态 ====
NEW：
ESTABLISH：
INVALID：
==== 如何维护session状态 ====
===== 输入项 =====
源ip
目的ip
源端口
目的端口
协议类型
发起者

==== 输出项 ====


== 应用层 ==
=== 黑/白名单 ===
应用层黑/白名单对应着引擎层的一系列规则。

= 策略规则 =
== 规则格式 ==
=== 普通规则格式 ===
源信息：目的信息：协议类型：会话状态：动作[[br]]
规则主要由五个部分组成。[[br]]
(1) 源信息[[br]]
源信息需要包含两项内容：源ip、源端口。[[br]][[br]]

(2) 目的信息[[br]]
目的信息需要包含两项内容：目的ip、目的端口。[[br]][[br]]

(3) 协议类型[[br]]
协议类型包括TCP、UDP等不同的类型。[[br]][[br]]

(4) 会话状态[[br]]
会话状态包括NEW、ESTABLISH、INVALID三种。[[br]]
对于UDP来说，当双方都接收到对方发来的包之后，session state变为ESTABLISH，在此之前，就是NEW。[[br]]
对于TCP来说，整个握手过程都是NEW，握手结束，进入通讯后，变为ESTABLISH状态。[[br]][[br]]

(5) 动作[[br]]
在ALLOW或DENY中二选一，表示允许数据包通过或拒绝数据包通过。[[br]][[br]]

=== 带有HashSet的规则 ===
HashMap名：协议类型：会话状态：动作[[br]]
(1) HashSet类型[[br]]
HashSet中包含哪些信息。使用一个4位2进制数，每一位代表以下一项，需要对比的设1，ANY设0[[br]]
源ip  源端口  目的ip  目的端口  [[br]][[br]]

(2) HashSet名[[br]]
HashSet的名称。[[br]][[br]]

(3) 协议类型[[br]]
协议类型包括TCP、UDP等不同的类型。[[br]][[br]]

(4) 会话状态[[br]]
会话状态包括NEW、ESTABLISH、INVALID三种。[[br]]
对于UDP来说，当双方都接收到对方发来的包之后，session state变为ESTABLISH，在此之前，就是NEW。[[br]]
对于TCP来说，整个握手过程都是NEW，握手结束，进入通讯后，变为ESTABLISH状态。[[br]][[br]]

(5) 动作[[br]]
在ALLOW或DENY中二选一，表示允许数据包通过或拒绝数据包通过。[[br]][[br]]

= 规则示例 =
== 普通规则 ==
Policy_rule_ops()
=== 参数 ===
{{{
参数名：location
参数类型：String
参数范围：INPUT/OUTPUT
}}}

{{{
参数名：op
参数类型：String
参数范围：ADD/REMOVE
}}}

{{{
参数名：src
参数类型：String
参数范围：ip地址
        0.0.0.0
        0.0.0.0:0
        fd00::1
        fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120
}}}

{{{
参数名：dst
参数类型：String
参数范围：ip地址
        0.0.0.0
        0.0.0.0:0
        fd00::1
        fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120
}}}

{{{
参数名：protocol
参数类型：String
参数范围：TCP/UDP
}}}

{{{
参数名：state
参数类型：String
参数范围：NEW/ESTABLIST/INVALID
}}}

{{{
参数名：action
参数类型：String
参数范围：ACCEPT/DROP
}}}

=== 示例1.仅包括ip信息的规则 ===
增加规则，允许1.1.1.1向2.2.2.2发起TCP连接
{{{
{
		"location":"INPUT"
		"op":"ADD"
        "src": "1.1.1.1",
        "dst": "2.2.2.2",
        "protocol": TCP,
        "state": NEW,
        "action": ACCEPT
}
}}}

=== 示例2.加上端口（暂不支持加端口） ===
删除禁止1.1.1.1的1111向2.2.2.2的2222发起UDP连接的规则
{{{
{
		"location":"INPUT"
		"op":"REMOVE"
        "src": "1.1.1.1：1111",
        "dst": "2.2.2.2：2222",
        "protocol": UDP,
        "state": NEW,
        "action": DROP
}
}}}

== 使用HashSet ==
以只控制源ip的HashSet为例,名为TestHashSet，加入1.1.1.1
=== 1 创建HashSet ===
创建HashSet时需要指明HashSet的类型，即哪些字段需要比较。使用一个4位2进制数，每一位代表以下一项，需要对比的设1，ANY设0 [[br]]
源ip  源端口  目的ip  目的端口  [[br]][[br]]

Policy_hashset_create()
==== 参数 ====
{{{
参数名：type
参数类型：int
参数范围：二进制1000 十进制8 仅比较源ip
		二进制1100 十进制12 比较源ip和port
		以此类推 
}}}

{{{
参数名：name
参数类型：String
}}}

=== 2 向HashSet中增加/删除内容 ===
根据HashSet的类型，需要比较的项传入数值，其他项传入""。
Policy_hashsetitem_ops();
==== 参数 ====
{{{
参数名：name
参数类型：String
}}}

{{{
参数名：op
参数类型：String
参数范围：ADD/REMOVE
}}}

{{{
参数名：src
参数类型：String
参数范围：ip地址
        0.0.0.0
        0.0.0.0:0
        fd00::1
        fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120
}}}

{{{
参数名：dst
参数类型：String
参数范围：ip地址
        0.0.0.0
        0.0.0.0:0
        fd00::1
        fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120
}}}

=== 3 写一条使用HashSet的规则 ===

Policy_hashsetrule_ops()
=== 参数 ===
{{{
参数名：location
参数类型：String
参数范围：INPUT/OUTPUT
}}}

{{{
参数名：op
参数类型：String
参数范围：ADD/REMOVE
}}}

{{{
参数名：name
参数类型：String
}}}

{{{
参数名：protocol
参数类型：String
参数范围：TCP/UDP
}}}

{{{
参数名：state
参数类型：String
参数范围：NEW/ESTABLIST/INVALID
}}}

{{{
参数名：action
参数类型：String
参数范围：ACCEPT/DROP
}}}

=== 示例1.增加规则，允许TestHashSet中的地址发起UDP连接 ===
{{{
{
		"location":"INPUT"
		"op":"ADD"
        "hashset": "TestHashSet",
        "protocol": UDP,
        "state": NEW,
        "action": ACCEPT
}
}}}

== 默认规则 ==
当所有规则都匹配不成功时，启用默认规则。 [[br]]
Policy_enable
== 参数 ==
{{{
参数名：enable
参数类型：Int
参数范围：0/非0
        0   false
        非0  true
}}}

{{{
参数名：default
参数类型：String
参数范围：ACCEPT/DROP
}}}

[[br]]

== 黑/白名单 ==
{{{
黑/白名单仅支持ip 
当ip位于黑名单时，所有src和dst为该ip的数据都会被DROP
当ip位于白名单时，所有src和dst为该ip的数据都会被ACCEPT
黑名单优先，当一个ip同时在黑/白名单时，数据会被DROP
}}}




== 参数 ==
{{{
参数名：enable
参数类型：Int
参数范围：0/非0
        0   false
        非0  true
}}}

{{{
参数名：default
参数类型：String
参数范围：ACCEPT/DROP
}}}

[[br]]
= Policy_pubkey_add =
== 功能 ==
增加一个pubkey到白名单/黑名单。
== 参数 ==
{{{
参数名：pubkey
参数类型：String
}}}

{{{
参数名：type
参数类型：Int
参数范围：0/1
        0 Policy_Whitelist
        1 Policy_Blacklist
}}}

[[br]]
= Policy_pubkey_remove =
== 功能 ==
从白名单/黑名单中移除一个pubkey。
== 参数 ==
{{{
参数名：pubkey
参数类型：String
}}}

{{{
参数名：type
参数类型：Int
参数范围：0/1
        0 Policy_Whitelist
        1 Policy_Blacklist
}}}

[[br]]
= Policy_rule_ops =
== 功能 ==
新增/移除一条Policy。
== 参数 ==
{{{
参数名：location
参数类型：String
参数范围：INPUT/OUTPUT
}}}

{{{
参数名：af
参数类型：Int
参数范围：4/6
        0 AF_INET
        1 AF_INET6
}}}

{{{
参数名：protocol
参数类型：Int
参数范围：6/17
        IPPROTO_TCP 6 /* tcp */
        IPPROTO_UDP 17 /* user datagram protocol */
}}}

{{{
参数名：src
参数类型：String
参数范围：ip地址
        0.0.0.0
        0.0.0.0:0
        fd00::1
        fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120
}}}

{{{
参数名：dst
参数类型：String
参数范围：ip地址
        0.0.0.0
        0.0.0.0:0
        fd00::1
        fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120
}}}

{{{
参数名：op
参数类型：String
参数范围：add/remove
}}}

{{{
参数名：action
参数类型：String
参数范围：ACCEPT/DROP
}}}

[[br]]
= Policy_rule_apply =
== 功能 ==

== 无参数 ==

[[br]]
= Policy_rule_flush =
== 功能 ==

== 参数 ==
{{{
参数名：location
参数类型：String
参数范围：INPUT/OUTPUT
}}}

[[br]]
= Policy_rule_list =
== 功能 ==
列出所有规则
== 参数 ==
{{{
参数名：location
参数类型：String
参数范围：INPUT/OUTPUT
}}}

[[br]]
= Policy_blockuid =
== 功能 ==
将uid加入block列表。
== 参数 ==
{{{
参数名：uid
参数类型：Int
}}}
